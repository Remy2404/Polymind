src\api\routes\webhook.py:37:5: E722 Do not use bare `except`
   |
35 |     try:
36 |         return urllib.parse.unquote(token)
37 |     except:
   |     ^^^^^^ E722
38 |         return token
   |

src\bot\telegram_bot.py:364:9: F841 Local variable `task` is assigned to but never used
    |
362 |     async def process_update(self, update_data):
363 |         """Process updates with task management."""
364 |         task = None
    |         ^^^^ F841
365 |         try:
366 |             # Expect update_data as dict
    |
    = help: Remove assignment to unused variable `task`

src\bot\telegram_bot.py:393:13: E722 Do not use bare `except`
    |
391 |                 elif isinstance(update_data, dict):
392 |                     update_id = update_data.get("update_id", "unknown")
393 |             except:
    |             ^^^^^^ E722
394 |                 pass
    |

src\handlers\command_handlers.py:442:15: F811 Redefinition of unused `export_to_document` from line 177
    |
441 |     # Delegate export commands
442 |     async def export_to_document(
    |               ^^^^^^^^^^^^^^^^^^ F811
443 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
444 |     ) -> None:
    |
    = help: Remove definition: `export_to_document`

src\handlers\command_handlers.py:447:15: F811 Redefinition of unused `handle_export` from line 182
    |
445 |         return await self.export_commands.export_to_document(update, context)
446 |
447 |     async def handle_export(
    |               ^^^^^^^^^^^^^ F811
448 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
449 |     ) -> None:
    |
    = help: Remove definition: `handle_export`

src\handlers\command_handlers.py:452:15: F811 Redefinition of unused `handle_export_conversation` from line 187
    |
450 |         return await self.export_commands.handle_export(update, context)
451 |
452 |     async def handle_export_conversation(
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ F811
453 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
454 |     ) -> None:
    |
    = help: Remove definition: `handle_export_conversation`

src\handlers\command_handlers.py:459:15: F811 Redefinition of unused `handle_callback_query` from line 194
    |
457 |         )  # Main callback query handler - delegate to central callback handler
458 |
459 |     async def handle_callback_query(
    |               ^^^^^^^^^^^^^^^^^^^^^ F811
460 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
461 |     ) -> None:
    |
    = help: Remove definition: `handle_callback_query`

src\handlers\command_handlers.py:551:15: F811 Redefinition of unused `group_settings_command` from line 235
    |
549 |             )
550 |
551 |     async def group_settings_command(
    |               ^^^^^^^^^^^^^^^^^^^^^^ F811
552 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
553 |     ):
    |
    = help: Remove definition: `group_settings_command`

src\handlers\command_handlers.py:592:15: F811 Redefinition of unused `group_context_command` from line 276
    |
590 |             )
591 |
592 |     async def group_context_command(
    |               ^^^^^^^^^^^^^^^^^^^^^ F811
593 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
594 |     ):
    |
    = help: Remove definition: `group_context_command`

src\handlers\command_handlers.py:643:15: F811 Redefinition of unused `group_threads_command` from line 327
    |
641 |             )
642 |
643 |     async def group_threads_command(
    |               ^^^^^^^^^^^^^^^^^^^^^ F811
644 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
645 |     ):
    |
    = help: Remove definition: `group_threads_command`

src\handlers\command_handlers.py:696:15: F811 Redefinition of unused `clean_threads_command` from line 380
    |
694 |             )
695 |
696 |     async def clean_threads_command(
    |               ^^^^^^^^^^^^^^^^^^^^^ F811
697 |         self, update: Update, context: ContextTypes.DEFAULT_TYPE
698 |     ):
    |
    = help: Remove definition: `clean_threads_command`

src\handlers\commands\__init__.py:9:30: F401 `.export_commands.EnhancedExportCommands` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
 7 | from .export_commands import ExportCommands
 8 | from .callback_handlers import CallbackHandlers
 9 | from .export_commands import EnhancedExportCommands
   |                              ^^^^^^^^^^^^^^^^^^^^^^ F401
10 | from .open_web_app import OpenWebAppCommands
   |
   = help: Add unused import `EnhancedExportCommands` to __all__

src\handlers\commands\export_commands.py:8:1: F403 `from spire.doc import *` used; unable to detect undefined names
  |
6 | from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
7 | from telegram.ext import ContextTypes
8 | from spire.doc import *
  | ^^^^^^^^^^^^^^^^^^^^^^^ F403
9 | from spire.doc.common import *
  |

src\handlers\commands\export_commands.py:9:1: F403 `from spire.doc.common import *` used; unable to detect undefined names
   |
 7 | from telegram.ext import ContextTypes
 8 | from spire.doc import *
 9 | from spire.doc.common import *
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F403
10 |
11 | # Pydantic for data validation
   |

src\handlers\commands\export_commands.py:34:24: F405 `Document` may be undefined, or defined from star imports
   |
32 |         try:
33 |             # Create document using Spire.Doc
34 |             document = Document()
   |                        ^^^^^^^^ F405
35 |
36 |             # Remove Spire.Doc evaluation warning by clearing document properties
   |

src\handlers\commands\export_commands.py:64:48: F405 `FileFormat` may be undefined, or defined from star imports
   |
63 |             try:
64 |                 document.SaveToFile(temp_path, FileFormat.Docx)
   |                                                ^^^^^^^^^^ F405
65 |                 document.Close()
   |

src\handlers\commands\export_commands.py:80:47: F405 `Section` may be undefined, or defined from star imports
   |
78 |             raise
79 |
80 |     def _add_formatted_content(self, section: Section, content: str):
   |                                               ^^^^^^^ F405
81 |         """Enhanced markdown to DOCX formatting with comprehensive support"""
82 |         lines = content.split("\n")
   |

src\handlers\commands\export_commands.py:122:56: F405 `Color` may be undefined, or defined from star imports
    |
120 |                 text_range.CharacterFormat.FontSize = 18
121 |                 text_range.CharacterFormat.FontName = "Arial"
122 |                 text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                                        ^^^^^ F405
123 |                     0, 32, 96, 148
124 |                 )  # Blue header
    |

src\handlers\commands\export_commands.py:135:56: F405 `Color` may be undefined, or defined from star imports
    |
133 |                 text_range.CharacterFormat.FontSize = 16
134 |                 text_range.CharacterFormat.FontName = "Arial"
135 |                 text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                                        ^^^^^ F405
136 |                     0, 68, 114, 196
137 |                 )  # Blue subheader
    |

src\handlers\commands\export_commands.py:148:56: F405 `Color` may be undefined, or defined from star imports
    |
146 |                 text_range.CharacterFormat.FontSize = 14
147 |                 text_range.CharacterFormat.FontName = "Arial"
148 |                 text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                                        ^^^^^ F405
149 |                     0, 84, 130, 53
150 |                 )  # Green subheader
    |

src\handlers\commands\export_commands.py:180:56: F405 `Color` may be undefined, or defined from star imports
    |
178 |                 text_range.CharacterFormat.FontName = "Arial"
179 |                 text_range.CharacterFormat.Italic = True
180 |                 text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                                        ^^^^^ F405
181 |                     0, 128, 128, 128
182 |                 )  # Gray quote
    |

src\handlers\commands\export_commands.py:192:56: F405 `Color` may be undefined, or defined from star imports
    |
190 | ΓÇª     text_range = paragraph.AppendText("ΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöüΓöü")
191 | ΓÇª     text_range.CharacterFormat.FontName = "Arial"
192 | ΓÇª     text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                              ^^^^^ F405
193 | ΓÇª         0, 200, 200, 200
194 | ΓÇª     )  # Light gray
    |

src\handlers\commands\export_commands.py:195:46: F405 `HorizontalAlignment` may be undefined, or defined from star imports
    |
193 |                     0, 200, 200, 200
194 |                 )  # Light gray
195 |                 paragraph.Format.Alignment = HorizontalAlignment.Center
    |                                              ^^^^^^^^^^^^^^^^^^^ F405
196 |                 paragraph.Format.SpaceBefore = 12
197 |                 paragraph.Format.SpaceAfter = 12
    |

src\handlers\commands\export_commands.py:271:46: F405 `HyperlinkType` may be undefined, or defined from star imports
    |
269 |                     # Add hyperlink
270 |                     hyperlink = paragraph.AppendHyperlink(
271 |                         link_url, link_text, HyperlinkType.WebLink
    |                                              ^^^^^^^^^^^^^ F405
272 |                     )
273 |                     hyperlink.CharacterFormat.FontName = "Arial"
    |

src\handlers\commands\export_commands.py:274:59: F405 `Color` may be undefined, or defined from star imports
    |
272 |                     )
273 |                     hyperlink.CharacterFormat.FontName = "Arial"
274 |                     hyperlink.CharacterFormat.TextColor = Color.FromArgb(
    |                                                           ^^^^^ F405
275 |                         0, 17, 100, 180
276 |                     )  # Blue link
    |

src\handlers\commands\export_commands.py:291:64: F405 `Color` may be undefined, or defined from star imports
    |
289 |                         text_range.CharacterFormat.FontName = "Courier New"
290 |                         text_range.CharacterFormat.FontSize = 10
291 |                         text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                                                ^^^^^ F405
292 |                             0, 196, 26, 22
293 |                         )  # Red code
    |

src\handlers\commands\export_commands.py:296:64: F405 `Color` may be undefined, or defined from star imports
    |
294 |                     elif earliest_format == "strikethrough":
295 |                         text_range.CharacterFormat.StrikeThrough = True
296 |                         text_range.CharacterFormat.TextColor = Color.FromArgb(
    |                                                                ^^^^^ F405
297 |                             0, 128, 128, 128
298 |                         )  # Gray strikethrough
    |

src\handlers\commands\export_commands.py:366:65: F405 `Color` may be undefined, or defined from star imports
    |
364 | ΓÇª                     # Use a more compatible way to set background color
365 | ΓÇª                     try:
366 | ΓÇª                         table_row.RowFormat.BackColor = Color.get_LightBlue()
    |                                                           ^^^^^ F405
367 | ΓÇª                     except AttributeError:
368 | ΓÇª                         # Fallback color setting
    |

src\handlers\commands\export_commands.py:370:69: F405 `Color` may be undefined, or defined from star imports
    |
368 | ΓÇª                     # Fallback color setting
369 | ΓÇª                     try:
370 | ΓÇª                         table_row.RowFormat.BackColor = Color.FromArgb(
    |                                                           ^^^^^ F405
371 | ΓÇª                             240, 248, 255
372 | ΓÇª                         )
    |

src\handlers\commands\export_commands.py:399:45: F405 `HorizontalAlignment` may be undefined, or defined from star imports
    |
397 | ΓÇª                     try:
398 | ΓÇª                         cell_paragraph.Format.HorizontalAlignment = (
399 | ΓÇª                             HorizontalAlignment.Center
    |                               ^^^^^^^^^^^^^^^^^^^ F405
400 | ΓÇª                         )
401 | ΓÇª                     except Exception:
    |

src\handlers\commands\export_commands.py:406:45: F405 `HorizontalAlignment` may be undefined, or defined from star imports
    |
404 | ΓÇª                     try:
405 | ΓÇª                         cell_paragraph.Format.HorizontalAlignment = (
406 | ΓÇª                             HorizontalAlignment.Left
    |                               ^^^^^^^^^^^^^^^^^^^ F405
407 | ΓÇª                         )
408 | ΓÇª                     except Exception:
    |

src\handlers\commands\export_commands.py:414:41: F405 `VerticalAlignment` may be undefined, or defined from star imports
    |
412 | ΓÇª                     try:
413 | ΓÇª                         cell.CellFormat.VerticalAlignment = (
414 | ΓÇª                             VerticalAlignment.Middle
    |                               ^^^^^^^^^^^^^^^^^ F405
415 | ΓÇª                         )
416 | ΓÇª                     except Exception:
    |

src\handlers\commands\export_commands.py:502:62: F405 `BorderStyle` may be undefined, or defined from star imports
    |
500 |                         try:
501 |                             # Set border style directly without accessing individual border objects
502 |                             cell_format.Borders.BorderType = BorderStyle.Single
    |                                                              ^^^^^^^^^^^ F405
503 |                             cell_format.Borders.LineWidth = 0.5
504 |                             cell_format.Borders.Color = (
    |

src\handlers\commands\export_commands.py:505:33: F405 `Color` may be undefined, or defined from star imports
    |
503 | ΓÇª                     cell_format.Borders.LineWidth = 0.5
504 | ΓÇª                     cell_format.Borders.Color = (
505 | ΓÇª                         Color.Black
    |                           ^^^^^ F405
506 | ΓÇª                     )  # Ensure default color
507 | ΓÇª                     # Use default color to avoid API issues
    |

src\handlers\commands\export_commands.py:517:65: F405 `BorderStyle` may be undefined, or defined from star imports
    |
515 | ΓÇª                     border = getattr(borders, border_type)
516 | ΓÇª                     if hasattr(border, "BorderType"):
517 | ΓÇª                         border.BorderType = BorderStyle.Single
    |                                               ^^^^^^^^^^^ F405
518 | ΓÇª                     if hasattr(border, "LineWidth"):
519 | ΓÇª                         border.LineWidth = 0.5
    |

src\handlers\commands\group_collaboration_commands.py:228:9: F841 Local variable `user_id` is assigned to but never used
    |
226 |             else None
227 |         )
228 |         user_id = update.effective_user.id
    |         ^^^^^^^ F841
229 |
230 |         if not group_id:
    |
    = help: Remove assignment to unused variable `user_id`

src\handlers\commands\group_collaboration_commands.py:415:9: F841 Local variable `user_id` is assigned to but never used
    |
413 |             else None
414 |         )
415 |         user_id = update.effective_user.id
    |         ^^^^^^^ F841
416 |
417 |         if not group_id:
    |
    = help: Remove assignment to unused variable `user_id`

src\handlers\commands\group_collaboration_commands.py:563:13: F841 Local variable `group_insights` is assigned to but never used
    |
561 |             relevant_memories = intelligent_context.get("relevant_memory", [])
562 |             suggestions = intelligent_context.get("suggested_actions", [])
563 |             group_insights = intelligent_context.get("group_insights", {})
    |             ^^^^^^^^^^^^^^ F841
564 |
565 |             if not relevant_memories:
    |
    = help: Remove assignment to unused variable `group_insights`

src\handlers\commands\group_collaboration_commands.py:811:5: E722 Do not use bare `except`
    |
809 |         chat_member = await bot.get_chat_member(group_id, user_id)
810 |         return chat_member.status in ["administrator", "creator"]
811 |     except:
    |     ^^^^^^ E722
812 |         return False
    |

src\handlers\commands\group_collaboration_commands.py:825:5: E722 Do not use bare `except`
    |
823 |             "description": chat.description,
824 |         }
825 |     except:
    |     ^^^^^^ E722
826 |         return {}
    |

src\handlers\enhanced_voice_handler.py:154:9: E722 Do not use bare `except`
    |
152 |         try:
153 |             await processing_msg.delete()
154 |         except:
    |         ^^^^^^ E722
155 |             pass  # Message might already be edited
    |

src\handlers\message_handlers.py:1247:13: F841 Local variable `format_options` is assigned to but never used
     |
1245 |             context.user_data["doc_export_image"] = image_file
1246 |             # Offer format selection
1247 |             format_options = [
     |             ^^^^^^^^^^^^^^ F841
1248 |                 [
1249 |                     InlineKeyboardButton(
     |
     = help: Remove assignment to unused variable `format_options`

src\handlers\model_fallback_handler.py:266:21: E722 Do not use bare `except`
    |
264 |                     try:
265 |                         await progress_msg.edit_text(msg)
266 |                     except:
    |                     ^^^^^^ E722
267 |                         pass
    |

src\handlers\model_fallback_handler.py:274:21: E722 Do not use bare `except`
    |
272 |                     try:
273 |                         await progress_msg.delete()
274 |                     except:
    |                     ^^^^^^ E722
275 |                         pass
276 |                 raise
    |

src\handlers\model_fallback_handler.py:303:17: E722 Do not use bare `except`
    |
301 |                 try:
302 |                     await progress_msg.delete()
303 |                 except:
    |                 ^^^^^^ E722
304 |                     pass
    |

src\handlers\model_fallback_handler.py:320:17: E722 Do not use bare `except`
    |
318 |                 try:
319 |                     await progress_msg.delete()
320 |                 except:
    |                 ^^^^^^ E722
321 |                     pass
    |

src\handlers\response_formatter.py:96:17: E722 Do not use bare `except`
   |
94 |                         possible_paths.append(os.path.join(npm_bin_path, "mmdc.cmd"))
95 |                         possible_paths.append(os.path.join(npm_bin_path, "mmdc"))
96 |                 except:
   |                 ^^^^^^ E722
97 |                     self.logger.warning("Failed to get npm global bin path")
   |

src\handlers\response_formatter.py:282:25: E722 Do not use bare `except`
    |
280 |                         try:
281 |                             os.unlink(src_path)
282 |                         except:
    |                         ^^^^^^ E722
283 |                             pass
284 |                         return img_file
    |

src\handlers\response_formatter.py:297:13: E722 Do not use bare `except`
    |
295 |             try:
296 |                 os.unlink(src_path)
297 |             except:
    |             ^^^^^^ E722
298 |                 pass
    |

src\handlers\text_handlers.py:630:13: F841 Local variable `formatted_response` is assigned to but never used
    |
629 |             # Format for Telegram
630 |             formatted_response = await self.response_formatter.format_telegram_markdown(
    |             ^^^^^^^^^^^^^^^^^^ F841
631 |                 text_to_send
632 |             )
    |
    = help: Remove assignment to unused variable `formatted_response`

src\services\ai_command_router_optimized.py:27:13: F401 `src.services.model_handlers.model_configs.ModelConfigurations` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
25 |     if not LOW_MEMORY_MODE:
26 |         from src.services.model_handlers.model_configs import (
27 |             ModelConfigurations,
   |             ^^^^^^^^^^^^^^^^^^^ F401
28 |             Provider,
29 |             ModelConfig,
   |
   = help: Remove unused import

src\services\ai_command_router_optimized.py:28:13: F401 `src.services.model_handlers.model_configs.Provider` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
26 |         from src.services.model_handlers.model_configs import (
27 |             ModelConfigurations,
28 |             Provider,
   |             ^^^^^^^^ F401
29 |             ModelConfig,
30 |         )
   |
   = help: Remove unused import

src\services\ai_command_router_optimized.py:29:13: F401 `src.services.model_handlers.model_configs.ModelConfig` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
27 |             ModelConfigurations,
28 |             Provider,
29 |             ModelConfig,
   |             ^^^^^^^^^^^ F401
30 |         )
   |
   = help: Remove unused import

src\services\collaboration\group_chat_manager.py:609:21: E722 Do not use bare `except`
    |
607 |                         dt = datetime.fromtimestamp(timestamp)
608 |                         time_str = dt.strftime("%m/%d %H:%M")
609 |                     except:
    |                     ^^^^^^ E722
610 |                         time_str = "Unknown"
611 |                 else:
    |

src\services\collaboration\group_chat_manager.py:725:9: E722 Do not use bare `except`
    |
723 |         try:
724 |             return await context.bot.get_chat_member_count(chat.id)
725 |         except:
    |         ^^^^^^ E722
726 |             return 0
    |

src\services\collaboration\group_intelligence.py:863:13: F841 Local variable `knowledge_items` is assigned to but never used
    |
862 |             # Knowledge sharing score
863 |             knowledge_items = len(self.group_knowledge.get(group_id, []))
    |             ^^^^^^^^^^^^^^^ F841
864 |             recent_knowledge = len(
865 |                 [
    |
    = help: Remove assignment to unused variable `knowledge_items`

src\services\group_chat\integration.py:99:13: F841 Local variable `user` is assigned to but never used
    |
 97 |         try:
 98 |             chat = update.effective_chat
 99 |             user = update.effective_user
    |             ^^^^ F841
100 |
101 |             if not chat or chat.type not in ["group", "supergroup"]:
    |
    = help: Remove assignment to unused variable `user`

src\services\group_chat\ui_components.py:190:13: E722 Do not use bare `except`
    |
188 |                     f"≡ƒôà Created: {created_date.strftime('%Y-%m-%d %H:%M')}"
189 |                 )
190 |             except:
    |             ^^^^^^ E722
191 |                 pass
    |

src\services\group_chat\ui_components.py:201:13: E722 Do not use bare `except`
    |
199 |                     f"≡ƒòÆ Last Activity: {activity_date.strftime('%Y-%m-%d %H:%M')}"
200 |                 )
201 |             except:
    |             ^^^^^^ E722
202 |                 pass
    |

src\services\group_chat\ui_components.py:243:17: E722 Do not use bare `except`
    |
241 |                     else:
242 |                         age_str = f" ({age.seconds // 60}m ago)"
243 |                 except:
    |                 ^^^^^^ E722
244 |                     pass
    |

src\services\group_chat\ui_components.py:325:13: E722 Do not use bare `except`
    |
323 |                     f"≡ƒôà Context Since: {created_date.strftime('%Y-%m-%d')}"
324 |                 )
325 |             except:
    |             ^^^^^^ E722
326 |                 pass
    |

src\services\group_chat\ui_components.py:340:13: E722 Do not use bare `except`
    |
339 |                 message_parts.append(f"≡ƒòÆ Last Updated: {last_update}")
340 |             except:
    |             ^^^^^^ E722
341 |                 pass
    |

src\services\group_chat\ui_components.py:410:17: E722 Do not use bare `except`
    |
408 |                     if datetime.now() - last_active_time > timedelta(days=7):
409 |                         activity_indicator = self.EMOJIS["inactive"]
410 |                 except:
    |                 ^^^^^^ E722
411 |                     pass
    |

src\services\media\multi_file_processor.py:534:17: E722 Do not use bare `except`
    |
532 |                 try:
533 |                     content = file_data.read().decode("utf-8", errors="ignore")
534 |                 except:
    |                 ^^^^^^ E722
535 |                     content = f"[Binary content from {filename}]"
    |

src\services\media\multi_file_processor.py:619:21: E722 Do not use bare `except`
    |
617 |                             extraction_prompt
618 |                         )
619 |                     except:
    |                     ^^^^^^ E722
620 |                         extraction = f"Could not extract {extraction_type} from binary file {filename}"
    |

src\services\media\multi_file_processor.py:755:13: E722 Do not use bare `except`
    |
753 |                 )
754 |                 return f"[Image description: {description}]"
755 |             except:
    |             ^^^^^^ E722
756 |                 return f"[Image file: {filename}]"
    |

src\services\media\multi_file_processor.py:764:13: E722 Do not use bare `except`
    |
762 |                 file_data.seek(0)  # Reset position
763 |                 return content[:4000]  # Limit length
764 |             except:
    |             ^^^^^^ E722
765 |                 return f"[Could not read text content from {filename}]"
    |

src\services\memory_context\memory_manager.py:381:13: F841 Local variable `cache_key` is assigned to but never used
    |
379 |         """Clear conversation memory with group support"""
380 |         async with self.lock:
381 |             cache_key = group_id if is_group else conversation_id
    |             ^^^^^^^^^ F841
382 |
383 |             if is_group:
    |
    = help: Remove assignment to unused variable `cache_key`

src\services\ui\enhanced_ui_components.py:238:9: F841 Local variable `message_type` is assigned to but never used
    |
236 |         # Analyze context and generate relevant suggestions
237 |         last_message = context.get("last_message", "")
238 |         message_type = context.get("message_type", "text")
    |         ^^^^^^^^^^^^ F841
239 |         user_history = context.get("user_history", [])
    |
    = help: Remove assignment to unused variable `message_type`

src\services\ui\enhanced_ui_components.py:239:9: F841 Local variable `user_history` is assigned to but never used
    |
237 |         last_message = context.get("last_message", "")
238 |         message_type = context.get("message_type", "text")
239 |         user_history = context.get("user_history", [])
    |         ^^^^^^^^^^^^ F841
240 |
241 |         # Code-related suggestions
    |
    = help: Remove assignment to unused variable `user_history`

src\services\user_data_manager.py:672:15: F811 Redefinition of unused `reset_conversation` from line 457
    |
670 |             return {}
671 |
672 |     async def reset_conversation(self, user_id: int) -> None:
    |               ^^^^^^^^^^^^^^^^^^ F811
673 |         """Reset the conversation history for a user."""
674 |         try:
    |
    = help: Remove definition: `reset_conversation`

src\services\user_data_manager.py:808:15: F811 Redefinition of unused `save_message_pair` from line 686
    |
806 |             self.logger.error(f"Error adding message for user {user_id}: {str(e)}")
807 |
808 |     async def save_message_pair(
    |               ^^^^^^^^^^^^^^^^^ F811
809 |         self,
810 |         user_id: str,
    |
    = help: Remove definition: `save_message_pair`

src\utils\docgen\document_ai_generator.py:162:17: F841 Local variable `heading_level` is assigned to but never used
    |
161 |             if re.match(r"^#{1,6}\s+", current_line):
162 |                 heading_level = len(re.match(r"^(#{1,6})\s+", current_line).group(1))
    |                 ^^^^^^^^^^^^^ F841
163 |                 heading_text = current_line.strip("#").strip()
    |
    = help: Remove assignment to unused variable `heading_level`

src\utils\docgen\document_ai_generator.py:365:17: F841 Local variable `current_heading_level` is assigned to but never used
    |
363 |                     next_heading_index += 1
364 |
365 |                 current_heading_level = len(
    |                 ^^^^^^^^^^^^^^^^^^^^^ F841
366 |                     re.match(r"^(#{1,6})\s+", current_line).group(1)
367 |                 )
    |
    = help: Remove assignment to unused variable `current_heading_level`

src\utils\docgen\document_ai_generator.py:371:21: F841 Local variable `next_heading_level` is assigned to but never used
    |
369 |                     r"^#{1,6}\s+", lines[next_heading_index]
370 |                 ):
371 |                     next_heading_level = len(
    |                     ^^^^^^^^^^^^^^^^^^ F841
372 |                         re.match(r"^(#{1,6})\s+", lines[next_heading_index]).group(1)
373 |                     )
    |
    = help: Remove assignment to unused variable `next_heading_level`

src\utils\docgen\document_generator.py:133:25: F841 Local variable `in_code_block` is assigned to but never used
    |
131 |                 for code_line in content.split("\n")[code_block_index + 1 :]:
132 |                     if code_line.strip() == "```":
133 |                         in_code_block = False
    |                         ^^^^^^^^^^^^^ F841
134 |                         break
135 |                     code_content.append(code_line)
    |
    = help: Remove assignment to unused variable `in_code_block`

src\utils\docgen\document_generator.py:245:9: F841 Local variable `in_code_block` is assigned to but never used
    |
243 |         # Process content with markdown-style parsing
244 |         current_paragraph = None
245 |         in_code_block = False
    |         ^^^^^^^^^^^^^ F841
246 |
247 |         # Split content by lines for processing
    |
    = help: Remove assignment to unused variable `in_code_block`

src\utils\docgen\document_generator.py:288:17: F841 Local variable `current_section_content` is assigned to but never used
    |
286 |             else:
287 |                 # Content line - mark that we've added content to the current section
288 |                 current_section_content = True
    |                 ^^^^^^^^^^^^^^^^^^^^^^^ F841
289 |
290 |                 # Process different content types
    |
    = help: Remove assignment to unused variable `current_section_content`

src\utils\docgen\document_generator.py:361:25: F841 Local variable `table_header_processed` is assigned to but never used
    |
359 |                             cell_properties.append(cell_shading)
360 |
361 |                         table_header_processed = True
    |                         ^^^^^^^^^^^^^^^^^^^^^^ F841
362 |                     else:
363 |                         # Add a regular row to the table
    |
    = help: Remove assignment to unused variable `table_header_processed`

src\utils\docgen\document_generator.py:394:35: E741 Ambiguous variable name: `l`
    |
392 |                         section_title = lines[max(0, i - 2) : i]
393 |                         section_title = [
394 |                             l for l in section_title if l.startswith("## ")
    |                                   ^ E741
395 |                         ]
396 |                         if section_title and (
    |

src\utils\docgen\document_generator.py:453:9: F841 Local variable `current_pos` is assigned to but never used
    |
451 |         # a proper parser would be better, but this handles common cases
452 |
453 |         current_pos = 0
    |         ^^^^^^^^^^^ F841
454 |         in_bold = False
455 |         in_code = False
    |
    = help: Remove assignment to unused variable `current_pos`

src\utils\docgen\document_processor.py:577:11: F811 Redefinition of unused `quick_document_analysis` from line 551
    |
576 | # Utility functions for document processing
577 | async def quick_document_analysis(
    |           ^^^^^^^^^^^^^^^^^^^^^^^ F811
578 |     gemini_api: GeminiAPI,
579 |     file_data: Union[bytes, io.BytesIO],
    |
    = help: Remove definition: `quick_document_analysis`

src\utils\docgen\document_processor.py:589:11: F811 Redefinition of unused `extract_document_text` from line 563
    |
589 | async def extract_document_text(
    |           ^^^^^^^^^^^^^^^^^^^^^ F811
590 |     gemini_api: GeminiAPI, file_data: Union[bytes, io.BytesIO], filename: str
591 | ) -> str:
    |
    = help: Remove definition: `extract_document_text`

src\utils\docgen\shared_imports.py:21:28: F401 `weasyprint.HTML` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 | WEASYPRINT_AVAILABLE = False
20 | try:
21 |     from weasyprint import HTML, CSS
   |                            ^^^^ F401
22 |
23 |     WEASYPRINT_AVAILABLE = True
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:21:34: F401 `weasyprint.CSS` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 | WEASYPRINT_AVAILABLE = False
20 | try:
21 |     from weasyprint import HTML, CSS
   |                                  ^^^ F401
22 |
23 |     WEASYPRINT_AVAILABLE = True
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:36:41: F401 `reportlab.lib.pagesizes.letter` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
34 | REPORTLAB_AVAILABLE = False
35 | try:
36 |     from reportlab.lib.pagesizes import letter, A4
   |                                         ^^^^^^ F401
37 |     from reportlab.platypus import (
38 |         SimpleDocTemplate,
   |
   = help: Remove unused import: `reportlab.lib.pagesizes.letter`

src\utils\docgen\shared_imports.py:50:37: F401 `reportlab.lib.units.inch` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
48 |     from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
49 |     from reportlab.lib import colors
50 |     from reportlab.lib.units import inch, cm
   |                                     ^^^^ F401
51 |     from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:50:43: F401 `reportlab.lib.units.cm` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
48 |     from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
49 |     from reportlab.lib import colors
50 |     from reportlab.lib.units import inch, cm
   |                                           ^^ F401
51 |     from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:51:37: F401 `reportlab.lib.enums.TA_LEFT` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |     from reportlab.lib import colors
50 |     from reportlab.lib.units import inch, cm
51 |     from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
   |                                     ^^^^^^^ F401
52 |
53 |     REPORTLAB_AVAILABLE = True
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:51:46: F401 `reportlab.lib.enums.TA_CENTER` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |     from reportlab.lib import colors
50 |     from reportlab.lib.units import inch, cm
51 |     from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
   |                                              ^^^^^^^^^ F401
52 |
53 |     REPORTLAB_AVAILABLE = True
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:51:57: F401 `reportlab.lib.enums.TA_RIGHT` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |     from reportlab.lib import colors
50 |     from reportlab.lib.units import inch, cm
51 |     from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
   |                                                         ^^^^^^^^ F401
52 |
53 |     REPORTLAB_AVAILABLE = True
   |
   = help: Remove unused import

src\utils\docgen\shared_imports.py:51:67: F401 `reportlab.lib.enums.TA_JUSTIFY` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
49 |     from reportlab.lib import colors
50 |     from reportlab.lib.units import inch, cm
51 |     from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
   |                                                                   ^^^^^^^^^^ F401
52 |
53 |     REPORTLAB_AVAILABLE = True
   |
   = help: Remove unused import

tests\test_ai_router_features.py:14:1: E402 Module level import not at top of file
   |
12 | sys.path.append(project_root)
13 |
14 | from src.services.ai_command_router import EnhancedIntentDetector, CommandIntent
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests\test_conversation_context.py:10:1: E402 Module level import not at top of file
   |
 8 | sys.path.insert(0, str(project_root))
 9 |
10 | from src.handlers.message_handlers import MessageHandlers
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
11 | from src.handlers.text_handlers import TextHandler
12 | from src.services.user_data_manager import UserDataManager
   |

tests\test_conversation_context.py:11:1: E402 Module level import not at top of file
   |
10 | from src.handlers.message_handlers import MessageHandlers
11 | from src.handlers.text_handlers import TextHandler
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 | from src.services.user_data_manager import UserDataManager
13 | from src.services.openrouter_api import OpenRouterAPI
   |

tests\test_conversation_context.py:12:1: E402 Module level import not at top of file
   |
10 | from src.handlers.message_handlers import MessageHandlers
11 | from src.handlers.text_handlers import TextHandler
12 | from src.services.user_data_manager import UserDataManager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
13 | from src.services.openrouter_api import OpenRouterAPI
14 | from src.services.rate_limiter import RateLimiter
   |

tests\test_conversation_context.py:13:1: E402 Module level import not at top of file
   |
11 | from src.handlers.text_handlers import TextHandler
12 | from src.services.user_data_manager import UserDataManager
13 | from src.services.openrouter_api import OpenRouterAPI
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
14 | from src.services.rate_limiter import RateLimiter
15 | from src.utils.log.telegramlog import TelegramLogger
   |

tests\test_conversation_context.py:14:1: E402 Module level import not at top of file
   |
12 | from src.services.user_data_manager import UserDataManager
13 | from src.services.openrouter_api import OpenRouterAPI
14 | from src.services.rate_limiter import RateLimiter
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
15 | from src.utils.log.telegramlog import TelegramLogger
   |

tests\test_conversation_context.py:15:1: E402 Module level import not at top of file
   |
13 | from src.services.openrouter_api import OpenRouterAPI
14 | from src.services.rate_limiter import RateLimiter
15 | from src.utils.log.telegramlog import TelegramLogger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
16 |
17 | # Configure logging
   |

tests\test_formatting.py:14:1: E402 Module level import not at top of file
   |
12 | sys.path.insert(0, str(project_root))
13 |
14 | from src.handlers.response_formatter import ResponseFormatter
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests\test_hardcoded_voice_config.py:155:42: E712 Avoid equality comparisons to `True`; use `config.get("enabled"):` for truth checks
    |
153 |         # Key tests
154 |         tests = [
155 |             ("Voice processing enabled", config.get("enabled") == True),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
156 |             ("Uses Faster-Whisper", config.get("default_engine") == "faster_whisper"),
157 |             ("Medium quality", config.get("quality") == "medium"),
    |
    = help: Replace with `config.get("enabled")`

tests\test_hardcoded_voice_config.py:160:29: E712 Avoid equality comparisons to `True`; use `config.get("enable_vad"):` for truth checks
    |
158 |             ("50MB file limit", config.get("max_file_size_mb") == 50),
159 |             ("300s timeout", config.get("timeout_seconds") == 300),
160 |             ("VAD enabled", config.get("enable_vad") == True),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
161 |             ("Model caching enabled", config.get("cache_models") == True),
162 |             ("Language detection enabled", config.get("language_detection") == True),
    |
    = help: Replace with `config.get("enable_vad")`

tests\test_hardcoded_voice_config.py:161:39: E712 Avoid equality comparisons to `True`; use `config.get("cache_models"):` for truth checks
    |
159 |             ("300s timeout", config.get("timeout_seconds") == 300),
160 |             ("VAD enabled", config.get("enable_vad") == True),
161 |             ("Model caching enabled", config.get("cache_models") == True),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
162 |             ("Language detection enabled", config.get("language_detection") == True),
163 |         ]
    |
    = help: Replace with `config.get("cache_models")`

tests\test_hardcoded_voice_config.py:162:44: E712 Avoid equality comparisons to `True`; use `config.get("language_detection"):` for truth checks
    |
160 |             ("VAD enabled", config.get("enable_vad") == True),
161 |             ("Model caching enabled", config.get("cache_models") == True),
162 |             ("Language detection enabled", config.get("language_detection") == True),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
163 |         ]
    |
    = help: Replace with `config.get("language_detection")`

tests\test_response_formatting.py:14:1: E402 Module level import not at top of file
   |
12 | sys.path.insert(0, str(project_root))
13 |
14 | from src.handlers.response_formatter import ResponseFormatter
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests\test_shared_memory.py:29:9: F841 Local variable `rate_limiter` is assigned to but never used
   |
27 |         # Mock some dependencies
28 |         logger.info("Creating mock dependencies...")
29 |         rate_limiter = RateLimiter()
   |         ^^^^^^^^^^^^ F841
30 |
31 |         # Mock managers (simplified for testing)
   |
   = help: Remove assignment to unused variable `rate_limiter`

Found 106 errors.
No fixes available (24 hidden fixes can be enabled with the `--unsafe-fixes` option).
